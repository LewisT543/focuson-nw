import { makeResolvers } from "../codegen/makeResolvers";
import { paramsForTest } from "./paramsForTest";
import { ChequeCreditbooksPD } from "../example/chequeCreditBooks/chequeCreditBooks.pageD";
import { chequeCreditBooksRestD } from "../example/chequeCreditBooks/chequeCreditBooks.restD";
import { toArray } from "@focuson/utils";

describe ( "makeResolvers", () => {
  it ( "should make resolvers", () => {
    expect ( makeResolvers ( paramsForTest, ChequeCreditbooksPD, 'chequeCreditBooks', chequeCreditBooksRestD, 'get', chequeCreditBooksRestD.resolvers.get ) ).toEqual ( [
      "package focuson.data.resolvers.ChequeCreditbooks;",
      "",
      "import focuson.data.fetchers.IFetcher;",
      "import org.springframework.stereotype.Component;",
      "import org.springframework.beans.factory.annotation.Autowired;",
      "",
      "import java.util.Map;",
      "import java.util.HashMap;",
      "import java.sql.CallableStatement;",
      "import java.sql.PreparedStatement;",
      "import java.sql.ResultSet;",
      "import java.sql.Connection;",
      "import java.sql.SQLException;",
      "import javax.sql.DataSource;",
      "import graphql.schema.DataFetcher;",
      "import focuson.data.fetchers.ChequeCreditbooks.ChequeCreditbooks_get_FFetcher;",
      "//added by param systemTime",
      "import focuson.data.utils.ITimeService;",
      "//If there is a compilation issue here is it because you need to set 'maxTuples'? Currently set to 2 ",
      "import focuson.data.mutator.utils.Tuple2;",
      "import java.util.Date;",
      "@Component",
      "public class ChequeCreditbooksResolver implements ChequeCreditbooks_get_FFetcher{",
      "",
      "   @Autowired",
      "   private DataSource dataSource;",
      "    @Autowired",
      "    focuson.data.utils.ITimeService systemTime;",
      "",
      "public DataFetcher<Map<String,Object>> getChequeCreditbooks(){",
      "  return dataFetchingEnvironment -> {",
      "    String dbName = dataFetchingEnvironment.getArgument(\"dbName\");",
      "    String brandRef = dataFetchingEnvironment.getArgument(\"brandRef\");",
      "    String applRef = dataFetchingEnvironment.getArgument(\"applRef\");",
      "    String clientRef = dataFetchingEnvironment.getArgument(\"clientRef\");",
      "    String accountId = dataFetchingEnvironment.getArgument(\"accountId\");",
      "    try(Connection connection = dataSource.getConnection()){",
      "      Map<String,Object> result = new HashMap<>();",
      "      //from ChequeCreditbooks.rest[chequeCreditBooks].resolvers[\"get\"]",
      "      //[{\"type\":\"output\",\"name\":\"val1\",\"javaType\":\"Integer\",\"sqlType\":\"INTEGER\"},{\"type\":\"output\",\"name\":\"val2\",\"javaType\":\"String\",\"sqlType\":\"CHAR\"},{\"type\":\"autowired\",\"name\":\"systemTime\",\"class\":\"{thePackage}.utils.ITimeService\",\"method\":\"now\",\"import\":true}]",
      "      Tuple2<Integer,String> params0 =  ChequeCreditbooks_get_getMeMyData1(connection,dbName);",
      "      Integer val1 = params0.t1;",
      "      String val2 = params0.t2;",
      "      //from ChequeCreditbooks.rest[chequeCreditBooks].resolvers[\"get\"]",
      "      //[{\"type\":\"output\",\"name\":\"val3\",\"javaType\":\"Integer\",\"sqlType\":\"INTEGER\"},{\"type\":\"output\",\"name\":\"val4\",\"javaType\":\"String\",\"sqlType\":\"CHAR\"},{\"type\":\"autowired\",\"name\":\"systemTime\",\"class\":\"{thePackage}.utils.ITimeService\",\"method\":\"now\",\"import\":true}]",
      "      Tuple2<Integer,String> params1 =  ChequeCreditbooks_get_getMeMyData2(connection,dbName);",
      "      Integer val3 = params1.t1;",
      "      String val4 = params1.t2;",
      "      ",
      "      result.put(\"val1\", val1);",
      "      result.put(\"val2\", val2);",
      "      result.put(\"val3\", val3);",
      "      result.put(\"val4\", val4);",
      "      return result;",
      "    }};",
      "  }",
      "",
      "    public Tuple2<Integer,String> ChequeCreditbooks_get_getMeMyData1(Connection connection, Object dbName) throws SQLException {",
      "    try (CallableStatement s = connection.prepareCall(\"call getMeMyData1(?, ?, ?)\")) {",
      "      s.registerOutParameter(1,java.sql.Types.INTEGER);",
      "      s.registerOutParameter(2,java.sql.Types.CHAR);",
      "      s.setObject(3, systemTime.now());",
      "      if (!s.execute()) throw new SQLException(\"Error in : ChequeCreditbooks_get_getMeMyData1\");",
      "      Integer val1 = s.getInt(1);",
      "      String val2 = s.getString(2);",
      "      return new Tuple2<>(val1,val2);",
      "  }}",
      "    public Tuple2<Integer,String> ChequeCreditbooks_get_getMeMyData2(Connection connection, Object dbName) throws SQLException {",
      "    try (CallableStatement s = connection.prepareCall(\"call getMeMyData2(?, ?, ?)\")) {",
      "      s.registerOutParameter(1,java.sql.Types.INTEGER);",
      "      s.registerOutParameter(2,java.sql.Types.CHAR);",
      "      s.setObject(3, systemTime.now());",
      "      if (!s.execute()) throw new SQLException(\"Error in : ChequeCreditbooks_get_getMeMyData2\");",
      "      Integer val3 = s.getInt(1);",
      "      String val4 = s.getString(2);",
      "      return new Tuple2<>(val3,val4);",
      "  }}",
      "",
      "public String dbName() {return IFetcher.db; }",
      "}"
    ] )
  } )
} )