type Query{
  getOccupationAndIncome(customerId: String!):OccupationAndIncome!
  getCreatePlanDD(accountId: String!, createPlanId: String!, customerId: String!):CreatePlanDD!
  listCreatePlanDD(accountId: String!, customerId: String!):[CreatePlanDD!]!
  getEAccountsSummaryDD(accountId: String!, customerId: String!):EAccountsSummaryDD!
  getChequeCreditbooksDD(accountId: String!, applRef: String!, brandRef: String!, customerId: String!):ChequeCreditbooksDD!
}
type Mutation{
  createOccupationAndIncome(customerId: String!):OccupationAndIncome!
  updateOccupationAndIncome(customerId: String!):OccupationAndIncome!
  createCreatePlanDD(accountId: String!, customerId: String!):CreatePlanDD!
  updateCreatePlanDD(accountId: String!, createPlanId: String!, customerId: String!):CreatePlanDD!
  deleteCreatePlanDD(accountId: String!, createPlanId: String!, customerId: String!):String
  createETransferDataD(customerId: String!):ETransferDataD!
  createCreateEAccountDataDD(accountId: String!, customerId: String!):CreateEAccountDataDD!
  createChequeCreditbooksDD(accountId: String!, applRef: String!, brandRef: String!, customerId: String!):ChequeCreditbooksDD!
}
type ChequeCreditbooksDD{
  history: [ChequeCreditbooksHistoryLineDD!]!
}
type ChequeCreditbooksHistoryLineDD{
  serialNumber: Int!
  howOrdered: String!
  dateOrder: String!
}
type CreateEAccountDataDD{
  name: String!
  type: String!
  savingsStyle: String!
  initialAmount: Int!
}
type CreatePlanDD{
  createPlanStart: String!
  createPlanDate: String!
  createPlanEnd: String!
}
type EAccountsSummaryDD{
  useEStatements: Boolean!
  eAccountsTable: [EAccountSummaryDD!]!
  totalMonthlyCost: Int!
  oneAccountBalance: Int!
  currentAccountBalance: Int!
  createPlan: CreatePlanDD!
}
type EAccountSummaryDD{
  accountId: String!
  displayType: String!
  description: String!
  virtualBankSeq: String!
  total: Int!
  frequency: String!
}
type ETransferDataD{
  amount: String!
  dateOfETransfer: String!
  description: String!
  fromAccount: String!
  toAccount: String!
  monitoringAccount: String!
  type: String!
  balance: Int!
  notes: String!
}
type OccupationAndIncome{
  typeOfProfession: String!
  occupation: String!
  customersDescription: String!
  businessType: String!
  businessName: String!
  dateStarted: String!
  averageAnnualDrawings: Int!
}
input ChequeCreditbooksDDInp{
  history: [ChequeCreditbooksHistoryLineDDInp!]!
}
input ChequeCreditbooksHistoryLineDDInp{
  serialNumber: Int!
  howOrdered: String!
  dateOrder: String!
}
input CreateEAccountDataDDInp{
  name: String!
  type: String!
  savingsStyle: String!
  initialAmount: Int!
}
input CreatePlanDDInp{
  createPlanStart: String!
  createPlanDate: String!
  createPlanEnd: String!
}
input ETransferDataDInp{
  amount: String!
  dateOfETransfer: String!
  description: String!
  fromAccount: String!
  toAccount: String!
  monitoringAccount: String!
  type: String!
  balance: Int!
  notes: String!
}
input OccupationAndIncomeInp{
  typeOfProfession: String!
  occupation: String!
  customersDescription: String!
  businessType: String!
  businessName: String!
  dateStarted: String!
  averageAnnualDrawings: Int!
}
input CreatePlanDDIdAndInp{
  createPlanStart: String!
  createPlanDate: String!
  createPlanEnd: String!
}
input OccupationAndIncomeIdAndInp{
  typeOfProfession: String!
  occupation: String!
  customersDescription: String!
  businessType: String!
  businessName: String!
  dateStarted: String!
  averageAnnualDrawings: Int!
}